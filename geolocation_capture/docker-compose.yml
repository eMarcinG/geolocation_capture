version: '3'

services:
  db_postgis:
    container_name: db_postgis
    image: postgis/postgis:latest
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - my_network
    restart: unless-stopped

  db_postgis_replica:
    container_name: db_postgis_replica
    image: postgis/postgis:latest
    env_file:
      - .env
    environment:
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    command: "postgres -c wal_level=replica -c archive_mode=on -c archive_command='cp %p /var/lib/postgresql/data/%f' -c max_wal_senders=3 -c max_replication_slots=3"
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - my_network
    depends_on:
      - db_postgis
    restart: unless-stopped

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    networks:
      - my_network
    restart: unless-stopped

  web_gc:
    container_name: web_gc
    build: .
    command: >
      sh -c "
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py shell < create_superuser.py &&
      python manage.py runserver 0.0.0.0:8000"
    env_file:
      - .env
    volumes:
      - .:/code
    ports:
      - "8002:8000"
    depends_on:
      - db_postgis
      - redis
    networks:
      - my_network
    restart: "on-failure"

  celery:
    build: .
    command: celery -A geolocation_capture worker --loglevel=info --uid=nobody
    env_file:
      - .env
    volumes:
      - .:/code
    depends_on:
      - db_postgis
      - redis
    networks:
      - my_network

networks:
  my_network:
    driver: bridge

volumes:
  postgres_data:
  postgres_replica_data:
