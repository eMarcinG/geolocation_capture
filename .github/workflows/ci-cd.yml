name: Run Tests

on:
  push:
    branches:
      - main
      - release
  pull_request:
    branches:
      - main
      - release

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Create .env file from secrets
      - name: Create .env file from secrets
        run: |
          echo "DJANGO_ENV=${{ secrets.DJANGO_ENV }}" > geolocation_capture/.env
          echo "DJANGO_ENV=${{ secrets.DJANGO_ENV }}" > geolocation_capture/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > geolocation_capture/.env
          echo "DEBUG=${{ secrets.DEBUG }}" > geolocation_capture/.env
          echo "DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}" > geolocation_capture/.env
          echo "DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}" > geolocation_capture/.env
          echo "DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}" > geolocation_capture/.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" > geolocation_capture/.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > geolocation_capture/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" > geolocation_capture/.env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" > geolocation_capture/.env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" > geolocation_capture/.env
          echo "POSTGRES_MASTER_HOST=${{ secrets.POSTGRES_MASTER_HOST }}" > geolocation_capture/.env
          echo "REPLICA_POSTGRES_DB=${{ secrets.REPLICA_POSTGRES_DB }}" > geolocation_capture/.env
          echo "REPLICA_POSTGRES_USER=${{ secrets.REPLICA_POSTGRES_USER }}" > geolocation_capture/.env
          echo "REPLICA_POSTGRES_PASSWORD=${{ secrets.REPLICA_POSTGRES_PASSWORD }}" > geolocation_capture/.env
          echo "REPLICA_POSTGRES_HOST=${{ secrets.REPLICA_POSTGRES_HOST }}" > geolocation_capture/.env
          echo "REPLICA_POSTGRES_PORT=${{ secrets.REPLICA_POSTGRES_PORT }}" > geolocation_capture/.env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" > geolocation_capture/.env
          echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" > geolocation_capture/.env
          echo "CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}" > geolocation_capture/.env
          echo "CELERY_ACCEPT_CONTENT=${{ secrets.CELERY_ACCEPT_CONTENT }}" > geolocation_capture/.env
          echo "CELERY_TASK_SERIALIZER=${{ secrets.CELERY_TASK_SERIALIZER }}" > geolocation_capture/.env
          echo "CELERY_RESULT_SERIALIZER=${{ secrets.CELERY_RESULT_SERIALIZER }}" > geolocation_capture/.env
          echo "CELERY_TIMEZONE=${{ secrets.CELERY_TIMEZONE }}" > geolocation_capture/.env
          echo "BASE_GEODATA_URL=${{ secrets.BASE_GEODATA_URL }}" > geolocation_capture/.env
          echo "BASE_API_KEY=${{ secrets.BASE_API_KEY }}" > geolocation_capture/.env
          echo "ALTERNATIVE_GEODATA_URL=${{ secrets.ALTERNATIVE_GEODATA_URL }}" > geolocation_capture/.env
          echo "ALTERNATIVE_API_KEY=${{ secrets.ALTERNATIVE_API_KEY }}" > geolocation_capture/.env
          echo "PGPOOL_BACKEND_NODES=${{ secrets.PGPOOL_BACKEND_NODES }}" > geolocation_capture/.env
          echo "PGPOOL_SR_CHECK_USER=${{ secrets.PGPOOL_SR_CHECK_USER }}" > geolocation_capture/.env
          echo "PGPOOL_SR_CHECK_PASSWORD=${{ secrets.PGPOOL_SR_CHECK_PASSWORD }}" > geolocation_capture/.env
          echo "PGPOOL_POSTGRES_USERNAME=${{ secrets.PGPOOL_POSTGRES_USERNAME }}" > geolocation_capture/.env
          echo "PGPOOL_POSTGRES_PASSWORD=${{ secrets.PGPOOL_POSTGRES_PASSWORD }}" > geolocation_capture/.env
          echo "PGPOOL_ADMIN_USERNAME=${{ secrets.PGPOOL_ADMIN_USERNAME }}" > geolocation_capture/.env
          echo "PGPOOL_ADMIN_PASSWORD=${{ secrets.PGPOOL_ADMIN_PASSWORD }}" > geolocation_capture/.env
          echo "ACCESS_TOKEN_LIFETIME=${{ secrets.ACCESS_TOKEN_LIFETIME }}" > geolocation_capture/.env
          echo "REFRESH_TOKEN_LIFETIME=${{ secrets.REFRESH_TOKEN_LIFETIME }}" > geolocation_capture/.env
          echo "ROTATE_REFRESH_TOKENS=${{ secrets.ROTATE_REFRESH_TOKENS }}" > geolocation_capture/.env
          echo "BLACKLIST_AFTER_ROTATION=${{ secrets.BLACKLIST_AFTER_ROTATION }}" > geolocation_capture/.env
          echo "ALGORITHM=${{ secrets.ALGORITHM }}" > geolocation_capture/.env
          echo "SIGNING_KEY=${{ secrets.SIGNING_KEY }}" > geolocation_capture/.env
          echo "VERIFYING_KEY=${{ secrets.VERIFYING_KEY }}" > geolocation_capture/.env
          echo "AUTH_HEADER_TYPES=${{ secrets.AUTH_HEADER_TYPES }}" > geolocation_capture/.env
          echo "USER_ID_FIELD=${{ secrets.USER_ID_FIELD }}" > geolocation_capture/.env
          echo "USER_ID_CLAIM=${{ secrets.USER_ID_CLAIM }}" > geolocation_capture/.env
          echo "AUTH_TOKEN_CLASSES=${{ secrets.AUTH_TOKEN_CLASSES }}" > geolocation_capture/.env
          echo "TOKEN_TYPE_CLAIM=${{ secrets.TOKEN_TYPE_CLAIM }}" > geolocation_capture/.env

      # Install Docker Compose 
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Run Docker Compose + test
      - name: Build and run tests with Docker Compose
        run: |
          docker-compose -f geolocation_capture/docker-compose.yml up -d --build
          docker-compose exec -T web_gc python manage.py test -v 3
          docker-compose down